#!/bin/bash

set -o errexit -o nounset -o pipefail

die() {
	printf '%s\n' "$*" >&2
	exit 1
}

build_request() {
	local file="$1"

	_add_message() {
		local role="$1" content="$2"

		jq \
			--arg 'role' "$role" \
			--arg 'content' "$content" \
			'.messages += [{"role": $role, "content": $content}]' \
		<"$file" \
		| sponge -- "$file"
	}

	local role='' content=''

	local s
	while IFS= read -r s; do
		if [[ "$s" =~ ^[^[:blank:]] ]]; then
			if [[ "$role" ]]; then
				_add_message "$role" "$content"
				content=''
			fi
			read -r role <<<"$s"
			continue
		fi

		content+="${s#$'\t'}"$'\n'
	done

	if [[ "$role" ]]; then
		_add_message "$role" "$content"
	fi
}

#
# configuration
#

CURL=(/usr/bin/curl --silent --fail)

if rc="$HOME/.chatgptrc"; [[ -f "$rc" && -r "$rc" ]]; then
	source -- "$rc"
fi

#
# resource cleanup
#

cleanup_files=()
trap 'rm -f -- "${cleanup_files[@]}"' EXIT

#
# command-line args
#

if (( $# < 1 )); then
	die 'invalid usage'
fi

#
# handle base_request
#

base_request="$(mktemp)"
cleanup_files+=("$base_request")

if ! "$HOME/.chatgpt.d/$1" >"$base_request"; then
	die 'base request is broken'
fi

#
# build the real request and send it
#

request="$(mktemp)" response="$(mktemp)"
cleanup_files+=("$request" "$response")

cat -- "$base_request" >"$request"

build_request "$request"

"${CURL[@]}" \
	-H "Authorization: Bearer $OPENAI_API_KEY" \
	--json "@$request" \
	'https://api.openai.com/v1/chat/completions' \
>"$response"

#
# print the response
#

printf '\n'

jq \
	--raw-output \
	'.choices[0].message.role' \
<"$response"

printf '\n'

jq \
	--raw-output \
	'.choices[0].message.content' \
<"$response" \
| fmt --split-only \
| sed 's/^./	&/'
